# -*- coding: utf-8 -*-
"""PROJECT MAGANG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AmdRi6FVZYpBMz0-xogS4nraUnRxtGM2

## Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
import seaborn as sns
import zipfile
import os
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

"""## Memuat Dataset"""

# Membaca data dari file CSV
df = pd.read_csv('DATA BENCANA - KALKULASI.csv')
df.head()

"""## EDA"""

# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
display(df.head())

# Display summary statistics
print("\nSummary statistics:")
display(df.describe())

# Display dataset information
print("\nDataset information:")
display(df.info())

# Check for missing values
print("\nMissing values in each column:")
display(df.isnull().sum())

"""### Desa/Kelurahan"""

# Group by Desa/Kelurahan and sum the Total column
desa_total = df.groupby('Desa/Kelurahan')['Total'].sum().sort_values(ascending=False)

# Plot the distribution of Total by Desa/Kelurahan
plt.figure(figsize=(10, 6))
ax = desa_total.plot(kind='bar', color='navy')
plt.title('Distribution of Total by Desa/Kelurahan')
plt.xlabel('Desa/Kelurahan')
plt.ylabel('Total')
plt.xticks(rotation=90)

# Annotate each bar with the value
for i in ax.containers:
    ax.bar_label(i, label_type="edge")

plt.show()

"""### Kecamatan"""

# Group by Kecamatan and sum the Total column
kecamatan_total = df.groupby('Kecamatan')['Total'].sum().sort_values(ascending=False)

# Plot the distribution of Total by Kecamatan
plt.figure(figsize=(10, 6))
ax = kecamatan_total.plot(kind='bar', color='navy')
plt.title('Distribution of Total by Kecamatan')
plt.xlabel('Kecamatan')
plt.ylabel('Total')
plt.xticks(rotation=45)

# Annotate each bar with the value
for i in ax.containers:
    ax.bar_label(i, label_type="edge")

plt.show()

"""### Peta Desa/Kelurahan dengan Garis Koordinat"""

import zipfile
import os
import geopandas as gpd
import matplotlib.pyplot as plt

# Path ke file zip dan direktori ekstraksi
zip_path = '/content/BATAS ADM KOTA BATU BIG 2022.zip'
extract_dir = '/content/MAP BATU'

# Ekstrak file zip
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

# Daftar file setelah ekstraksi
extracted_files = os.listdir(extract_dir)
print("File yang diekstrak:", extracted_files)

# Muat file shapefile
shapefile_path = os.path.join(extract_dir, 'BATAS ADM KOTA BATU BIG 2022.shp')
kota_batu = gpd.read_file(shapefile_path)

# Buat GeoDataFrame untuk data bencana
gdf = gpd.GeoDataFrame(
    df,
    geometry=gpd.points_from_xy(df.Longitude, df.Latitude),
    crs="EPSG:4326"  # WGS 84
)

# Visualisasi distribusi bencana di Kota Batu
fig, ax = plt.subplots(1, 1, figsize=(10, 10))

# Plot peta administrasi Kota Batu
base = kota_batu.plot(ax=ax, color='white', edgecolor='black')

# Plot data bencana di atas peta Kota Batu
gdf.plot(ax=base, markersize=10, color='red', alpha=0.5, label='Desa/Kelurahan')

# Tambahkan label nama desa/kelurahan pada setiap titik
for x, y, label in zip(gdf.geometry.x, gdf.geometry.y, df['Desa/Kelurahan']):
    ax.text(x, y, label, fontsize=8, ha='right', color='black', bbox=dict(facecolor='white', alpha=0.5, boxstyle='round,pad=0.3'))

# Tambahkan legenda, judul, dan label sumbu
plt.legend()
plt.title('Distribusi Bencana di Kota Batu, Malang, Jawa Timur')
plt.xlabel('Longitude')
plt.ylabel('Latitude')

# Tampilkan plot
plt.show()

"""## Standarisasi Data"""

# Pilih hanya kolom numerik yang relevan
selected_columns = ['Banjir', 'Tanah Longsor', 'Cuaca Ektrem', 'Kebakaran Hutan dan Lahan',
                    'Gempa Bumi', 'Erupsi Gunung Api', 'Epidemi dan Wabah Penyakit',
                    'Gagal Teknologi', 'Konflik Sosial']

# Normalisasi data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df[selected_columns])

# Konversi data yang telah dinormalisasi kembali ke DataFrame untuk ditampilkan
scaled_df = pd.DataFrame(scaled_data, columns=selected_columns)

# Tampilkan beberapa baris pertama dari data yang sudah dinormalisasi
print("Normalized data:")
display(scaled_df.head())

"""## Reduksi Data"""

# Lakukan reduksi dimensi menggunakan PCA
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(scaled_df)

# Convert the reduced data to a DataFrame for easier viewing
reduced_df = pd.DataFrame(reduced_data, columns=['PC1', 'PC2'])

# Display the first few rows of the reduced data
reduced_df.head()

"""# Implementasi Model Clustering dengan K-Means

### Jumlah Cluster (K)
"""

# Determine the optimal number of clusters using the elbow method after PCA
wcss_pca = []
for i in range(1, 11):
    kmeans_pca = KMeans(n_clusters=i, random_state=42)
    kmeans_pca.fit(reduced_df)
    wcss_pca.append(kmeans_pca.inertia_)

# Plot the elbow graph after PCA
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss_pca, marker='o', linestyle='--')
plt.title('Elbow Method for Optimal k (After PCA)')
plt.xlabel('Number of clusters (k)')
plt.ylabel('WCSS (Within-Cluster Sum of Squares)')
plt.grid(True)
plt.show()

"""## Klusterisasi Desa/Kelurahan Rawan Bencana"""

# Tentukan jumlah kluster berdasarkan analisis sebelumnya
k_optimal = 3

# Inisiasi dan fit model KMeans
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
kmeans.fit(reduced_data)

# Menambahkan label kluster ke dataframe asli
df['Cluster'] = kmeans.labels_

# Mengurutkan DataFrame berdasarkan kolom 'Cluster'
df_sorted = df.sort_values(by='Cluster')
display(df_sorted)

# Menyimpan hasil ke dalam file CSV
df_sorted.to_csv('hasil_clustering.csv', index=False)

"""## Visualisasi Desa/Kelurahan Rawan Bencana Berdasarkan Kelas Cluster"""

# Buat GeoDataFrame untuk data bencana dengan label cluster
gdf = gpd.GeoDataFrame(
    df_sorted,
    geometry=gpd.points_from_xy(df_sorted.Longitude, df_sorted.Latitude),
    crs="EPSG:4326"  # WGS 84
)

# Visualizing the distribution of disaster-prone areas in Kota Batu with clustering results
fig, ax = plt.subplots(1, 1, figsize=(10, 8))

# Plot the administrative map of Kota Batu
base = kota_batu.plot(ax=ax, color='white', edgecolor='black')

# Plot the disaster data with different colors based on the cluster
gdf.plot(ax=base, column='Cluster', cmap='viridis', markersize=50, alpha=0.7, legend=True, edgecolor='k')

# Annotate the map with the names of the villages or subdistricts
for x, y, label in zip(gdf.geometry.x, gdf.geometry.y, gdf['Desa/Kelurahan']):
    ax.text(x, y, label, fontsize=8, ha='right', color='black')

# Add title, x-axis, and y-axis labels
plt.title('Distribusi Bencana di Kota Batu, Malang, Jawa Timur dengan K-Means Clustering')
plt.xlabel('Longitude')
plt.ylabel('Latitude')

# Show the plot
plt.show()

"""## Visualisasi Berdasarkan Frekuensi Jenis Bencana di Desa/Kelurahan Rawan Bencana"""

# Visualisasi kerawanan bencana di peta
fig, ax = plt.subplots(3, 3, figsize=(18, 15))
bencana_list = ['Banjir', 'Tanah Longsor', 'Cuaca Ektrem', 'Kebakaran Hutan dan Lahan',
                'Gempa Bumi', 'Erupsi Gunung Api', 'Epidemi dan Wabah Penyakit',
                'Gagal Teknologi', 'Konflik Sosial']

for i, bencana in enumerate(bencana_list):
    row = i // 3
    col = i % 3
    base = kota_batu.plot(ax=ax[row, col], color='white', edgecolor='black')

    # Plot the disaster-prone areas
    gdf.plot(ax=base, column=bencana, cmap='OrRd', markersize=50, alpha=0.7, legend=True, edgecolor='k')

    # Annotate the map only for areas with a high risk (above a certain threshold)
    threshold = gdf[bencana].mean()  # You can adjust this threshold as needed
    for x, y, label, risk in zip(gdf.geometry.x, gdf.geometry.y, gdf['Desa/Kelurahan'], gdf[bencana]):
        if risk > threshold:
            ax[row, col].text(x, y, label, fontsize=8, ha='right', color='black')

    ax[row, col].set_title(f'Kerawanan {bencana}')
    ax[row, col].set_xlabel('Longitude')
    ax[row, col].set_ylabel('Latitude')

plt.tight_layout()
plt.show()

"""# Knowledge Interpretation

Pola yang ditemukan adalah sebagai berikut:

1.   Cluster 0 (Tidak Rawan) : Desa/Kelurahan dalam Cluster 0 memiliki tingkat kerawanan rendah dikarenakan jumlah kejadian bencanan di wilayah ini cenderung sedikit dan hanya melibatkan satu atau dua jenis bencana dengan frekuensi rendah.
2.   Cluster 1 (Cukup Rawan) : Desa/Kelurahan dalam Cluster 1 terdapat peningkatan jumlah dan varian jenis bencana, seperti bencana Tanah Longsor dan Cuaca Ekstrem lebih sering terjadi.
3.   Cluster 2 (Sangat Rawan) : Desa/Kelurahan dalam Cluster 2 memiliki peningkatan jumlah jenis bencana yang terjadi, seperti pada bencana Tanah Longsor lebih sering terjadi di wilayah tersebut.
"""